package items {import config.FeedComponentConfig;import flash.display.Loader;import flash.display.Shape;import flash.display.Sprite;import flash.events.Event;import flash.events.MouseEvent;import flash.geom.Point;import flash.geom.Rectangle;import utils.TextFieldHelper;import utils.StringUtils;import utils.MetricsUtils;public class FeedItemView extends AbstractFeedItemView{	protected var _fullView:FeedItemFullView;	    protected static const MARGIN:uint = 4;    protected static const RAIL:uint = 6;    protected var _remainingWidth:int;    protected var _remainingHeight:int;    protected var _imageUrl:String;    protected var _imageSpace:Rectangle;    protected var _link:Sprite;        protected static var _numImageLoadErrors:uint;    protected static const ERROR_IMAGE_URL:String = "http://img.widgetbox.com/uploaded/e96e526d11c9815c5fc82099e4ec9da4/noimg_075.png";    // TODO: Add this once the file has been pushed (next release).//    protected static const ERROR_IMAGE_URL:String = "http://pub.widgetbox.com/images/feed-image-load-error.png";	protected static const TITLE_CONTENT_Y_SPACING:uint = 2;	public static const MAX_IMAGE_RELOAD_ATTEMPTS_ON_ERROR:uint = 3;    public function FeedItemView(api:Object, model:Object, config:FeedComponentConfig, metricsUtil:MetricsUtils)    {        super(api, model, config, metricsUtil);                _imageUrl = model.thumbUrl || model.imageUrl;        _numImageLoadErrors = 0;    }	public function get fullView() : FeedItemFullView	{		return _fullView;	}	    override public function render(width:Number, height:Number) : Point {        _displayWidth = width;        _displayHeight = height;		_remainingWidth = _displayWidth - (MARGIN * 2);        _remainingHeight = _displayHeight - (MARGIN * 2);                if(_config.includeImages && !StringUtils.isBlank(_model.imageUrl)) {            _imageSpace = resolveMaxImageRectangle();            _image = getImage(_imageUrl, _imageSpace, _config.imageProportion, imageLoaded, imageErrored);        } else {            finishRendering();        }        return new Point(0, _displayHeight);    }    protected function getTitleTextOptions():Object {        return {width:_remainingWidth, numLines:(_displayHeight >= 120 ? 2 : 1), ellipse:TextFieldHelper.ELLIPSE, useHTML:true, titleFontSize: _config.titleFontSize, atLeastOneLine: true};    }        protected function getContentTextOptions():Object {        return {width: _remainingWidth, height: _remainingHeight, ellipse: TextFieldHelper.ELLIPSE, useHTML: true, atLeastOneLine: true};    }        protected function renderTitleText():void {        getTitleText(getTitleTextOptions());        _remainingHeight -= _titleTextField.height;        this.addChild(_titleTextField);    }        protected function finishRendering() : void {        //get sharing controls first to use height for determining size of other elements        if(!_model.isError && _config.sharingOptions && _config.sharingOptions.length > 0){            getShareControl();        }        renderTitleText();                if(_config.includeSummaries && !StringUtils.isBlank(_model.content)){            var content:String = _model.content.replace(/(<br\s*\/*>\s*)+/ig, "\u2708");            // In case the content (before minify) starts with line breaks - remove the extra spaces (which minify replaces            // the line breaks with)...            while (content.charAt(0) == "\u2708")             {                 content = content.substr(1);             }                        getContentText(content, getContentTextOptions());            if (_contentTextField)            {                _contentTextField.text = _contentTextField.text.replace(/(\u2708)+/ig, " ");                this.addChild(_contentTextField);            }        }        addLinking(_displayWidth, _displayHeight);        positionChildren();    }    protected function resolveMaxImageRectangle() : Rectangle {        var h:uint = _displayHeight - (MARGIN*2);        var oneThirdWidth:uint = (_displayWidth-(MARGIN*2-RAIL))/3;        var w:uint = (h <= oneThirdWidth) ? h : oneThirdWidth;        return new Rectangle(0, 0, w, h);    }    protected function imageLoaded(e:Event) : void {        // Clone the Bitmap so that the Loader can be garbage collected; cross-domain issues preclude it.		_image = e.currentTarget.loader as Loader;        if(_imageSpace.height > 20 && (e.target.width < 20 || e.target.height < 20)) {            this.removeChild(_image);            _image = null;            _imageSpace = null;        } else {            _remainingWidth -= _imageSpace.width + RAIL;        }        finishRendering();    }    protected function imageErrored(e:Event) : void {        trace('Feed item view - image load error! Trying to load image again - total errors are',_numImageLoadErrors);			if (_numImageLoadErrors < MAX_IMAGE_RELOAD_ATTEMPTS_ON_ERROR) // Retry loading the image.		{			render(_displayWidth, _displayHeight);		}		else if (_imageUrl == ERROR_IMAGE_URL) // Loading the error image failed.		{            this.removeChild(_image);            _imageSpace = null;            finishRendering();                    }        else // Load the error image.        {            _imageUrl = ERROR_IMAGE_URL;            render(_displayWidth, _displayHeight);		}        		_numImageLoadErrors++;    }    protected function positionImage():void    {        if(_imageSpace){            var imgX:uint = (_imageSpace.width - _image.width)/2;            if(_config.imagePosition == FeedComponentConfig.IMAGE_LOCATION_RIGHT) {                imgX += _displayWidth - MARGIN - _imageSpace.width;            } else {                imgX += MARGIN;            }            _image.x = imgX;            _image.y = MARGIN;        }    }        override protected function positionChildren() : void{//        trace("Positioning children for article: " + _model.title);        positionImage();        _titleTextField.x = MARGIN;        _titleTextField.y = MARGIN;        if(_contentTextField){            _contentTextField.x = MARGIN;            _contentTextField.y = _titleTextField.textHeight + MARGIN + TITLE_CONTENT_Y_SPACING;        }        if(_imageSpace && _config.imagePosition == FeedComponentConfig.IMAGE_LOCATION_LEFT) {           _titleTextField.x += _imageSpace.width + RAIL;            if(_contentTextField){                _contentTextField.x += _imageSpace.width + RAIL;            }        }        if(_sharingControls){            _sharingControls.x = (_config.imagePosition == FeedComponentConfig.IMAGE_LOCATION_LEFT) ? _displayWidth - (MARGIN + _sharingControls.width) : MARGIN;            _sharingControls.y = _displayHeight - (MARGIN + _sharingControls.height);            if(_sharingControls.height + (MARGIN*2) >= _displayHeight){                _sharingControls.y = (_displayHeight - _sharingControls.height)/2;            }            if(_contentTextField && _sharingControls.y <= _contentTextField.y + _contentTextField.textHeight) {                var contentFieldHelper:TextFieldHelper = new TextFieldHelper(_contentTextField);                _contentTextField = contentFieldHelper.truncateToFitWidth(_remainingWidth - _sharingControls.width - MARGIN, 1, TextFieldHelper.ELLIPSE, true);            }            if(_titleTextField && _sharingControls.y <= _titleTextField.y + _titleTextField.height) {                if(_sharingControls.y <= _titleTextField.y + TITLE_CONTENT_Y_SPACING                        || _contentTextField.y + _contentTextField.textHeight - TITLE_CONTENT_Y_SPACING >= _displayHeight) {                    this.removeChild(_contentTextField);                }                var titleFieldHelper:TextFieldHelper = new TextFieldHelper(_titleTextField);                _titleTextField = titleFieldHelper.truncateToFitWidth(_remainingWidth - _sharingControls.width - MARGIN, 1, TextFieldHelper.ELLIPSE, true);            }            this.addChild(_sharingControls);        }				dispatchEvent(new Event(FeedComponent.ITEM_RENDER_COMPLETE));    }    protected function maskImageWithRoundRect(cornerRadius:Number):void    {        var objMask:Shape = new Shape();        objMask.graphics.beginFill(0xFFFFFF);        objMask.graphics.drawRoundRect(_image.x, _image.y, _image.width, _image.height, cornerRadius, cornerRadius);        objMask.graphics.endFill();        _image.mask = objMask;        addChild(objMask);    }    protected function addLinking(width:Number, height:Number):void{        _link = new Sprite();        _link.graphics.beginFill(0, .05);        _link.graphics.drawRect(0, 0, width, height);        _link.graphics.endFill();        _link.addEventListener(MouseEvent.CLICK, doClick);        this.addEventListener(MouseEvent.ROLL_OVER, doRollOver);        this.addEventListener(MouseEvent.ROLL_OUT, doRollOut);        _link.buttonMode = true;        _link.alpha = 0;        this.addChild(_link);    }    protected function doClick(e:MouseEvent):void{        trace("Clicking on article");        var helper:Object = _metricsUtil.logArticleSelect(title, linkUrl);        if(_config.linkBehavior == FeedComponentConfig.LINK_BEHAVIOR_SELF) {            if (!_fullView) {				dispatchEvent(new Event(FeedComponent.FULL_VIEW_LOAD));                _fullView = new FeedItemFullView(_api, _model, _config, _metricsUtil);                _fullView.addEventListener(FeedComponent.FULL_VIEW_TRANSITION, function(e:Event):void{                    dispatchEvent(new Event(FeedComponent.FULL_VIEW_INITIAL_TRANSITION));                });                _fullView.render(_displayWidth - _fullViewXMargin, 1000);            } else {                dispatchEvent(new Event(FeedComponent.FULL_VIEW_TRANSITION));            }        } else {            _api.net.navigateToURL(linkUrl, {window:"_blank"}, helper);        }    }    protected function doRollOver(e:MouseEvent):void{        _link.alpha = 1;    }    protected function doRollOut(e:MouseEvent):void{        _link.alpha = 0;    }}}