package items {import config.FeedComponentConfig;import flash.display.Sprite;import flash.errors.IllegalOperationError;import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.SecurityErrorEvent;import flash.geom.Point;import flash.geom.Rectangle;import flash.text.TextField;import flash.text.TextFormat;import utils.TextFieldHelper;import utils.MetricsUtils;import utils.TextUtils;/** * FeedItemView * * Responsible for displaying a single item in the feed. * * @param model an Object, parsed from XML, that represents the feed.  Some fields are: * 		- title * 		- contents * */public class AbstractFeedItemView extends Sprite {	private static const SUBCLASS_ERROR:String = "You must subclass AbstractFeedItemView!";    /**     * Contains content for the feed item.  Fields of interest are:     *      imageUrl - location of the image     *      content - feed text     *      title - feed title     *      linkUrl - clickthrough URL for the feed itself     *      xml - the raw content input to the parser     */    private static const IMAGE_LOADER_TYPE_FILL:String = "FILL";    private static const IMAGE_LOADER_TYPE_DOWNSCALE:String = "DOWNSCALE";	protected static const CONTENT_TEXT_LEADING:uint = 3;    protected static const TITLE_TEXT_LEADING:uint = 3;    protected var _api:Object;    protected var _model:Object;	protected var _config:FeedComponentConfig;	protected var _metricsUtil:MetricsUtils;    protected var _displayWidth:uint;	protected var _displayHeight:uint;    protected var _titleTextField:TextField;    protected var _contentTextField:TextField;    protected var _image:*;    protected var _sharingControls:Sprite;	protected var _fullViewXMargin:Number;    protected var _isFullView:Boolean;	/**     *     * @param model an Object, parsed from XML, that represents the feed.     *     */    public function AbstractFeedItemView(api:Object, model:Object, config:FeedComponentConfig, metricsUtil:MetricsUtils)    {        this._api = api;        this._model = model;        this._config = config;        this._metricsUtil = metricsUtil;		_fullViewXMargin = 0;        _isFullView = false;    }	/**	 * Draws TextField and adds it to the display list; children responsible	 * for positioning.	 */    public function render(width:Number, height:Number):Point    {    	this._displayWidth = width;    	this._displayHeight = height;		getTitleText({width:this._displayWidth});		getContentText(_model.content, {width:this._displayWidth, height:(this._displayHeight - _titleTextField.textHeight)});        positionChildren();        this.addChild(_titleTextField);        this.addChild(_contentTextField);        return new Point(0, this._displayHeight);    }	protected function getImage(imageUrl:String, maxImageRectangle:Rectangle, imageProportion:String, loadFunction:Function, errorFunction:Function) : Object {        var imageLoader:* = _api.factory.getImageLoader();        imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(event:Event) : void {            var contentType:String = event.target.contentType;			if(contentType == "image/jpeg" || contentType == "image/jpg" ||                    contentType == "image/gif" || contentType == "image/png"){                loadFunction(event);            } else {                //content is not an image                errorFunction(event);            }        });		        imageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorFunction);        imageLoader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorFunction);        var loaderOptions:Object = {            useProxy : true,            maxWidth:maxImageRectangle.width,            maxHeight:maxImageRectangle.height,            type: (imageProportion == FeedComponentConfig.IMAGE_PROPORTION_SQUARE ? IMAGE_LOADER_TYPE_FILL : IMAGE_LOADER_TYPE_DOWNSCALE)        };        imageLoader.loadImage(imageUrl, loaderOptions);        this.addChild(imageLoader);        return imageLoader;    }    protected function getTitleText(options:Object):void	{		options.atLeastOneLine = true;        _titleTextField = getTextField(	_model.title,										TextUtils.getTextFormat(_config.font, options.titleFontSize, _config.titleTextColor, true, TITLE_TEXT_LEADING), options);	}    /**     * Returns null if there is not enough height to display the text.     */	protected function getContentText(text:String, options:Object):void	{		_contentTextField = getTextField(text,                                         TextUtils.getTextFormat(_config.font, _config.contentFontSize, _config.contentTextColor, false, CONTENT_TEXT_LEADING), options);//, numLinesToDisplay);	}		/**	 * For setting the full view margin (if its horizontal borders differ from that of the list view).	 */	public function set fullViewXMargin(xMargin:Number):void	{		if (_fullViewXMargin != xMargin) {			_fullViewXMargin = xMargin;		}	}		public function get shareControl():Sprite {		return _sharingControls;	}	    protected function getShareControl() : Sprite {        if(_sharingControls == null){            var options:Object = {                services : _config.sharingOptions  //This should be an array of strings e.g. ["facebook", "twitter", "email"]            };            _sharingControls = _api.factory.getTheme().getShareControls(options);            _sharingControls.addEventListener("share", handleShareEvent);        }        return _sharingControls;    }	protected function positionChildren():void	{		mustSubclass();	}	/**	 * If height is not input, the textField will take on the height of its input text.	 */    protected function getTextField(text:String, textFormat:TextFormat, options:Object):TextField    {        var textField:TextField = TextUtils.getTextField();		disableScroll(textField);        textField.defaultTextFormat = textFormat;        if(options && !isNaN(options.width)) {            textField.width = options.width;        }        if(options && options.useHTML){            textField.htmlText = text;        } else {            textField.text = text;        }                if(options) {            if (!isNaN(options.width)) {                var textFieldHelper:TextFieldHelper = new TextFieldHelper(textField);                if (options.height && !isNaN(options.height)) {                    textField = textFieldHelper.truncateToFit(options.width, options.height, options.ellipse, options.useHTML, options.atLeastOneLine);                } else if (options.numLines && !isNaN(options.numLines)) {                    textField = textFieldHelper.truncateToFitWidth(options.width, options.numLines, options.ellipse, options.useHTML);                } else {                    textField = textFieldHelper.truncateToFit(options.width, Number.MAX_VALUE, options.ellipse, options.useHTML, options.atLeastOneLine);                }		    }        }        return textField;    }	protected function disableScroll(textField:TextField):void	{		// For some reason this doesn't work here...		//			_contentTextField.mouseWheelEnabled = false;		// ... so this is the fix.		textField.addEventListener(Event.SCROLL, function (e:Event):void												{													textField.scrollV = 0;												});	}    protected function handleShareEvent(evt:Event):void {        var service:String = evt.target.service;        var options:Object = {                service: service,                title: _model.title,                description: getShareContent(service, _model.content),                url: _model.linkUrl,                imageUrl: _model.imageUrl            };        _api.net.share(options, _metricsUtil.logShareInteraction(service, !_isFullView));    }        protected function getShareContent(service:String, content:String = "", truncateLength:uint = 255):String    {        if(service == "twitter"){            return "Reading: %t %u";        } else {            var string:String = TextFieldHelper.stripTags(content).substr(0, truncateLength);            string = string.replace(/‘|’/g, '\'');            if (string.length == truncateLength) {                string += '...';            }            return string;        }    }		public function get displayHeight():uint	{		return _displayHeight;	}		public function get displayWidth():uint	{		return _displayWidth;	}		public function get linkUrl():String	{		return _model.linkUrl.concat();	}		public function get title():String	{		return _model.title.concat();	}	private function mustSubclass():void {        throw new IllegalOperationError(SUBCLASS_ERROR);    }    public function get metricsDetail():String {        return _model.title;    }}}