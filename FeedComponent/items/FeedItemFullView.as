/** * Copyright 2011 Flite, Inc. * All rights reserved. * * THIS PROGRAM IS CONFIDENTIAL AND AN UNPUBLISHED WORK AND TRADE * SECRET OF THE COPYRIGHT HOLDER, AND DISTRIBUTED ONLY UNDER RESTRICTION. */package items {    import config.FeedComponentConfig;        import flash.display.Loader;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.events.TextEvent;    import flash.geom.Point;    import flash.geom.Rectangle;    import flash.text.TextField;    import flash.text.TextFieldAutoSize;    import utils.StringUtils;    import utils.MetricsUtils;    import utils.TextUtils;        public class FeedItemFullView extends AbstractFeedItemView{        private var _margin:uint = 4;        private var _rail:uint = 6;                private var _remainingWidth:uint;                private var _imageSpace:Rectangle;                public function FeedItemFullView(api:Object, model:Object, config:FeedComponentConfig, metricsUtil:MetricsUtils)        {            trace("New Feed Item Full: " + model.title);            super(api, model, config, metricsUtil);            _isFullView = true;        }                override public function render(width:Number, height:Number) : Point {            trace("rendering article w:" + width + ", h:" + height);            //        _model.content = "This is my content, it is just text and should wrap around this image to my right! Does it wrap? I hope so, let's keep typing in case this isn't long enough to wrap around the full image.";            _displayWidth = width;            _displayHeight = height;                        _remainingWidth = _displayWidth - (_margin * 2);                        var titleOptions:Object = {width:_remainingWidth, titleFontSize: _config.titleFontSize + 2, numLines: 3};            getTitleText(titleOptions);                        _imageSpace = resolveMaxImageRectangle();                        renderContent();            positionChildren();                        return new Point(0, _displayHeight);        }                private function resolveMaxImageRectangle() : Rectangle {            var imageX:uint = StringUtils.isBlank(_model.content) ? _margin : ((_remainingWidth - _rail)/2 + _rail);            var imageY:uint = _margin + _rail + _titleTextField.textHeight;            var imageWidth:uint = StringUtils.isBlank(_model.content) ? _remainingWidth : (_remainingWidth - _rail)/2;            var imageHeight:uint = _displayHeight - (_margin*2);            return new Rectangle(imageX, imageY, imageWidth, imageHeight);        }                protected function renderContent():void        {            trace('content is ' + _model.content);                        _contentTextField = new TextField();            _contentTextField.selectable = false;            disableScroll(_contentTextField);            _contentTextField.autoSize = TextFieldAutoSize.LEFT;            _contentTextField.wordWrap = true;            _contentTextField.multiline = true;            _contentTextField.width = _remainingWidth;            _contentTextField.defaultTextFormat = TextUtils.getTextFormat(_config.font, _config.contentFontSize, _config.contentTextColor, false, CONTENT_TEXT_LEADING);                        var html:String = _model.content;            html = html.replace(/<a /ig, "<font color='" + _config.linkColorString + "'><a ");            html = html.replace(/<\/a>/ig, "</a></font>");            html = html.replace(/(?<=href=["'])([^]+?(?=["']))/ig, "event:$1");            html = html.replace(/<(\/*)em>/ig, "<$1i>");            html = html.replace(/<(\/*)strong>/ig, "<$1b>");            html = html.replace(/(<br\s*\/*>\s*)+/ig, "<br>");            _contentTextField.addEventListener(TextEvent.LINK, handleContentLink);                        if(!StringUtils.isBlank(_model.imageUrl)) {                var proxiedImageUrl:String = _api.util.url.getProxiedImageURL(_model.imageUrl, {maxWidth:_imageSpace.width, type:"DOWNSCALE", useProxy:true});                html = "<img src='" + proxiedImageUrl + "' id='leading-image' width='" + _imageSpace.width + "px' align='right'/>" + html;            }            _contentTextField.htmlText = html;            // Remove any escaped "<br>" tags from the title text...            _titleTextField.htmlText = _titleTextField.htmlText.replace(/&lt;br&gt;/g, '');                        _image = _contentTextField.getImageReference("leading-image");            if (_image) {                (_image as flash.display.Loader).contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event):void { dispatchEvent(new Event(FeedComponent.FULL_VIEW_IMAGE_LOADED)); });                (_image as flash.display.Loader).contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void { trace('Image load error caught!',e); });            }					            _contentTextField.y = _titleTextField.textHeight;        }                private function handleContentLink(event:TextEvent) : void {            var textLinkURL:String = event.text;            if(!StringUtils.isBlank(textLinkURL)){                trace("Tracking link to: " + textLinkURL);                _api.net.navigateToURL(textLinkURL, {window:"_blank"}, _metricsUtil.logArticleInteraction("Read more", {source:"article"}));            }        }                override protected function positionChildren() : void{            _titleTextField.x = _margin;            _titleTextField.y = _margin;            this.addChild(_titleTextField);                        if(_image){                _image.x = _imageSpace.x;                _image.y = _imageSpace.y;            }                        if(_contentTextField){                _contentTextField.x = _margin;                _contentTextField.y = _titleTextField.y + _titleTextField.textHeight + _rail;                this.addChild(_contentTextField);            }                        if(!_model.isError){                getShareControl();            }                        trace('dispatching full view transition event');            dispatchEvent(new Event(FeedComponent.FULL_VIEW_TRANSITION));        }            }}