package config  //components.feed{//import com.flite.core.Config;import flash.external.ExternalInterface;import flash.text.FontStyle;/** * Config params for the Feed Component.  Note that this is only a convenience class; * it merely encapsulates all the component's config params, allowing for static type checking * and type safety, and therefore less developer error versus using the api.config.component * Object directly. */public class FeedComponentConfig{    //SOURCE PARAMETERS    public var sourceUrl:String;		//	["facebook", "twitter", "email", "linkedin", "yahoo"];    public var sharingOptions:Array;    public var linkBehavior:String;    public static const LINK_BEHAVIOR_SELF:String = "_self";    public static const LINK_BEHAVIOR_NEW:String = "_new";    //LAYOUT PARAMETERS    public var itemHeight:Number;    public static const MIN_ITEM_HEIGHT:uint = 20;    public var includeSummaries:Boolean;    public var includeImages:Boolean;    public var feedType:String;    // FeedComponent.FEED_TYPE_FACEBOOK, FEED_TYPE_TWITTER, FEED_TYPE_GENERAL        public var imagePosition:String;    public static const IMAGE_LOCATION_LEFT:String = "left";    public static const IMAGE_LOCATION_RIGHT:String = "right";    public var imageProportion:String;    public static const IMAGE_PROPORTION_SQUARE:String = "square";    public static const IMAGE_PROPORTION_ORIGINAL:String = "original";    public var controlMode:String;    public static const CONTROL_MODE_SCROLLBAR:String = "scrollbar";    public static const CONTROL_MODE_PAGINATION:String = "pagination";    public static const CONTROL_MODE_NONE:String = "none";    public var autoScrollInterval:Number;    public var maxItems:uint;    public var isRandomized:Boolean;    //STYLE PARAMETERS    public var scrollbarColor:uint;	public var titleTextColor:uint;	public var titleFontSize:uint;	public var contentTextColor:uint;	public var contentFontSize:uint;    public var linkColorString:String;    public var separatorColor:uint;    public var font:String;		public var transitionType:String;	public static const TRANSITION_TYPE_SLIDE:String = "slide";	public static const TRANSITION_TYPE_FADE:String = "fade";		public var transitionAnimationTime:Number;    /**     * @param configObject a reference to the api.config.component object that contains     * all the config params necessary to configure the component.     *     * Access a config param in your component in one of two ways     *      *  1) config.map.configParamName      * or     *  2) config.getString("configParamName") || config.getNumber("configParamName") || config.getBoolean("configParamName")  || config.getInt("configParamName")     *       */    public function FeedComponentConfig(configObj:Object)    {        trace("New FeedComponent Config created");        sourceUrl = configObj.getString("source_url");        sharingOptions = (configObj.getString("sharing_options")) ? configObj.getString("sharing_options").split(",") : null;        linkBehavior = configObj.getString("link_behavior") || LINK_BEHAVIOR_SELF;        itemHeight = configObj.getNumber("item_height"); // Number(configObject.ITEM_HEIGHT.value);        if(!itemHeight || isNaN(itemHeight) || itemHeight < MIN_ITEM_HEIGHT) {            itemHeight = MIN_ITEM_HEIGHT;        }        includeSummaries = configObj.hasKey("include_summaries") ? configObj.getBoolean("include_summaries") : true;        includeImages = configObj.hasKey("include_images") ? configObj.getBoolean("include_images") : true;        imagePosition = configObj.getString("image_position") || IMAGE_LOCATION_LEFT;        imageProportion = configObj.getString("image_proportion") || IMAGE_PROPORTION_SQUARE;        controlMode = configObj.getString("control_mode") || CONTROL_MODE_SCROLLBAR;		transitionType = configObj.getString("transition_type") || TRANSITION_TYPE_SLIDE;		transitionAnimationTime = configObj.getNumber("transition_animation_time");		if (isNaN(transitionAnimationTime)) {			transitionAnimationTime = 0.5;				}		        autoScrollInterval = configObj.getNumber("auto_scroll_interval");        if(!autoScrollInterval || isNaN(autoScrollInterval)) {            autoScrollInterval = 0;        }        maxItems = configObj.getUint("max_items") || 20;        isRandomized = configObj.getBoolean("is_randomized");        scrollbarColor = configObj.getColor("scrollbar_color");		titleTextColor = configObj.getColor("title_text_color") || 0x333333;		titleFontSize = configObj.getUint("title_font_size") || 14;		contentTextColor = configObj.getColor("content_text_color") || 0x777777; //0x737373;		contentFontSize = configObj.getUint("content_font_size") || 12;		        linkColorString = configObj.getString("link_color") || '#4A99AE'; //6496cc;        separatorColor = configObj.getColor("separator_color") || 0xB3B3B3;        font = configObj.getString("font") || "Helvetica,Arial,_sans";    }}}